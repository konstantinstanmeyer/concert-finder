import Head from 'next/head'
import { GetServerSideProps, InferGetServerSidePropsType } from "next"
import { setHasVisited, validateLocation } from '@/redux/slices/results/resultsSlice'
import { useAppSelector, AppDispatch, store } from '@/redux/store'
import Navbar from '@/components/Navbar'
import { useRouter } from 'next/router'
import { getCity, getStatus, getStateAbbr, getHasVisited } from '@/redux/slices/results/resultsSlice'
import { getFeaturedEvents, rehydrateFeatured, getLocation } from '@/redux/slices/user/userSlice'
import { useRef, useState } from 'react'
import Spinner from '@/components/Spinner'
import { useSession } from 'next-auth/react'
import { useEffect } from 'react'
import { useDispatch } from 'react-redux'
import Link from 'next/link'
import isNumeric from '@/util/isNumeric'
import FeaturedCard from '@/components/FeaturedCard'
import blurb from '@/components/AboutBlurb'

export default function Home(props: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { data: session, status } = useSession();
  const [location, setLocation] = useState<String>("");
  const [message, setMessage] = useState<String | undefined>("");
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const city = useAppSelector(getCity);
  const cityStatus = useAppSelector(getStatus);
  const stateAbbr = useAppSelector(getStateAbbr);
  const hasVisited = useAppSelector(getHasVisited);
  const { featured } = props;
  const userLocation = useAppSelector(getLocation);
  const dispatch = useDispatch<AppDispatch>();
  const didType = useRef(false);
  const router = useRouter();
  let controller = new AbortController;

  console.log(props);

  useEffect(() => {
    if(featured.length === 0){
      dispatch(rehydrateFeatured(props));
    } else {
      // console.log(featured);
    }
  }, [featured])

  useEffect(() => {
    setTimeout(function() {
      if(isLoading === false){
        document.getElementById('spinner')?.classList.add("spinner--hidden");
      }
      setTimeout(function() {
        dispatch(setHasVisited(true));
      }, 1000);
    }, 1000);
  }, [isLoading]);

  useEffect(() => {
    (async() => {
      if(router.isReady){
        if(status === 'authenticated'){
          setIsLoading(false);
        } else if(status === 'unauthenticated'){
          // router.push('/login');
        }
      }
      // const json = await fetch('/api/mongodb');
      // console.log(json);
    })()
  }, [router.isReady, status])

  useEffect(() => {
    switch(cityStatus){
      case "success":
        setMessage(`${city}, ${stateAbbr}`);
        break;
      case "loading":
        setMessage("loading...");
        break;
      case "error":
        if(didType.current && isNumeric(location) && location.length !== 5) {
          setMessage("enter a valid zipcode");
        } else {
          setMessage("no results found");
        }
        break;
    }
  }, [cityStatus])

  async function handleLocationChange(l: string){
    setLocation(l);
    controller.abort();
    controller = new AbortController;
    dispatch(validateLocation(l));
    if(!didType.current){
      didType.current = true;
    }
  }

  return (
    <>
      <Navbar session={session} isUser={status === "authenticated"}  />
      <div className="home">
        <div className="top">
          <Head>
            <title>LiveScene</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
          </Head>
          {hasVisited ? null : <Spinner />}
          <div className="home-search">
            <p className="catchphrase">Your Guide to Live Music</p>
            <div className="search-box">
              <div className="location-input">
                <img src="/pin.png" className="pin" />
                <input placeholder="search by zipcode or city..." className="location" type="text" value={location as string} onChange={(e) => handleLocationChange(e.target.value)} />
                <p className="message-home">{message ? `(${message})` : null}</p>
              </div>
              <Link href={cityStatus === "success" ? `/find/concerts?location=${city}%20${stateAbbr}` : location.length === 0 ? "/find" : {}} className="search-button">
                <p className="find-shows">Find Shows</p>
              </Link>
            </div>
            <Link className="browse" href="/find">
              browse all events
            </Link>
          </div>
        </div>
        <div className="featured">
          <h1 className="">Featured Events{userLocation ? userLocation : " in the U.S."}</h1>
          <div className="featured-list">
            {featured.map((featured: any, index: number) => (
              <FeaturedCard key={index} featured={featured} />
            ))}
          </div>
        </div>
        <div className="line" />
        <h3 className="about-name">About LiveScene</h3>
        {blurb}
      </div>
    </>
  )
}

export const getServerSideProps:GetServerSideProps = async(ctx) => {
  await store.dispatch(getFeaturedEvents({
    page: 1
  }));
  const events = store.getState().user.featured;

  return {
    props: {
      featured: events
    }
  }
}